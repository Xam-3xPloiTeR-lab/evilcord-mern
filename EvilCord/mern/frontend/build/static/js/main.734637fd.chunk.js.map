{"version":3,"sources":["features/userSlice.js","features/appSlice.js","Components/SidebarChannel.jsx","Components/firebase.jsx","Components/axios.js","Components/Sidebar.jsx","Components/ChatHeader.jsx","Components/Message.jsx","Components/Chat.jsx","Login.jsx","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","appSlice","channelId","channelName","setChannelInfo","selectChannelId","app","selectChannelName","SidebarChannel","id","channel","dispatch","useDispatch","className","onClick","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","providor","GoogleAuthProvider","instance","axios","create","baseURL","pusher","Pusher","cluster","Sidebar","useSelector","useState","channels","setChannels","getChannels","get","then","res","console","log","data","useEffect","subscribe","bind","prompt","post","map","fontSize","Avatar","src","photo","displayName","uid","substring","Button","signOut","ChatHeader","placeholder","Message","timestamp","message","Date","parseInt","toDateString","Chat","input","setInput","messages","setMessages","getConversation","conversation","disabled","value","onChange","e","target","preventDefault","now","type","Login","alt","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.734637fd.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: state => {\r\n      state.user = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login,logout } = userSlice.actions;\r\n\r\n\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n      channelId: null,\r\n      channelName: null\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\n\r\n\r\nexport const selectChannelId = state => state.app.channelId;\r\nexport const selectChannelName = state => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setChannelInfo } from '../features/appSlice';\r\nimport './SidebarChannel.css'\r\nfunction SidebarChannel({ id, channel}) {\r\n    const dispatch =useDispatch();\r\n\r\n    return (\r\n        <div className=\"sidebarChannel\" onClick={() => dispatch(\r\n            setChannelInfo({\r\n                channelId: id,\r\n                channelName: channel,\r\n            })\r\n        )}>\r\n            <h4>\r\n                <span className=\"sidebarChannel_hash\">#</span>{channel}\r\n            </h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChannel\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBd4I8SWdCSIFcfCM7KcoxoMAZBFw7CqSA\",\r\n    authDomain: \"discord-clone-xam.firebaseapp.com\",\r\n    projectId: \"discord-clone-xam\",\r\n    storageBucket: \"discord-clone-xam.appspot.com\",\r\n    messagingSenderId: \"336159482606\",\r\n    appId: \"1:336159482606:web:c05ec94c529391f5f3c9ff\",\r\n    measurementId: \"G-CSL39CVDGD\"\r\n  };\r\n\r\n  const firebaseapp = firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseapp.firestore();\r\n  const auth = firebase.auth();\r\n  const providor = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export {auth,providor};\r\n  export default db;","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://localhost:1337'\r\n})\r\n\r\nexport default instance","import React, { useEffect, useState } from 'react'\r\nimport './Sidebar.css'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SidebarChannel from './SidebarChannel';\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport { Avatar, Button } from '@material-ui/core';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport HeadsetIcon from '@material-ui/icons/Headset';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport  db,{ auth} from './firebase';\r\nimport axios from './axios'\r\nimport Pusher from 'pusher-js'\r\n\r\nconst pusher = new Pusher('a92e0921af39228a0668', {\r\n    cluster: 'ap2'\r\n  });\r\n\r\nfunction Sidebar() {\r\n    const user = useSelector(selectUser);\r\n    const [channels, setChannels] = useState([]);\r\n    \r\n    // useEffect (() =>{\r\n    //     db.collection(\"channels\").onSnapshot(snapshot =>\r\n    //         setChannels(snapshot.docs.map(doc=> ({\r\n    //             id: doc.id,\r\n    //             channel: doc.data(),\r\n    //         })))\r\n    //     );\r\n    // }, []);\r\n\r\n    const getChannels = () =>{\r\n        axios.get('/get/channelList').then((res)=>{\r\n            console.log(res.data)\r\n            setChannels(res.data)\r\n        })\r\n    }\r\n\r\n    useEffect (() =>{\r\n        getChannels()\r\n        const channel = pusher.subscribe('channels');\r\n        channel.bind('newChannel', function(data) {\r\n        getChannels()\r\n    });\r\n    }, []);\r\n    \r\nconst handleAddChannel = () => {\r\n    const channelName = prompt(\"<Enter new channel name>\");\r\n    if(channelName){\r\n        axios.post('/new/channel', {\r\n            channelName: channelName\r\n        })\r\n        \r\n    }\r\n\r\n};\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n\r\n         <div className=\"sidebar__top\"> \r\n                <h3>Evilcord</h3>\r\n                <ExpandMoreIcon/>\r\n         </div> \r\n\r\n         <div className=\"sidebar__channel\">\r\n                <div className=\"sidebar__channelHeader\">\r\n                    <div className=\"sidebar__header\">\r\n                    <ExpandMoreIcon/>\r\n                    <h4>Channel's List</h4>\r\n                    </div>\r\n                    <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\"/>\r\n                </div>\r\n\r\n                <div className=\"sidebar__channelList\">\r\n                    {channels.map(channel => (\r\n                        <SidebarChannel key={channel.id} id={channel.id} channel={channel.name}/>\r\n                    )\r\n                    )}\r\n                </div>\r\n         </div>\r\n\r\n         <div className=\"sidebar__voice\">\r\n             <SignalCellularAltIcon className=\"sidebar__voiceIcon\" fontSize=\"large\"/>\r\n             <div className=\"sidebar__voiceInfo\">\r\n                 <h3>Voice disconnected</h3>\r\n                 <p>Stream</p>\r\n             </div>\r\n\r\n             <div className=\"sidebar__voiceIcon\">\r\n                 <InfoOutlinedIcon/>\r\n                 <CallIcon/>\r\n             </div>\r\n         </div>\r\n\r\n            <div className=\"sidebar__profile\">\r\n                <Avatar  src={user.photo} />\r\n\r\n                <div className=\"sidebar__profileInfo\">\r\n                    <h3>{user.displayName}</h3>\r\n                    <p>#{user.uid.substring(0,5)}</p>    \r\n                </div>\r\n\r\n                <div className=\"sidebar__profileIcon\">\r\n                    <MicIcon/>\r\n                    <HeadsetIcon/>\r\n                    <SettingsIcon/>\r\n                </div>\r\n                </div>\r\n                <Button onClick={()=> auth.signOut()} ><span className=\"logout\">Logout</span></Button>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react';\r\nimport './ChatHeader.css';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationIcon from '@material-ui/icons/EditLocation';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\r\n\r\nfunction ChatHeader({channelName}) {\r\n    return (\r\n        <div>\r\n           <div className=\"chatHeader\">\r\n                <div className=\"chatHeader__left\">\r\n                    <h3>\r\n                    <span className=\"chatHeader__hash\">#</span>\r\n                    {channelName}\r\n                    </h3>\r\n                </div>\r\n                <div className=\"chatHeader__right\">\r\n                    <NotificationsIcon/>\r\n                    <EditLocationIcon/>\r\n                    <PeopleAltIcon/>\r\n                    <div className=\"chatHeader__search\">\r\n                        <input placeholder=\"search\"/>\r\n                        <SearchRoundedIcon/>\r\n                    </div>\r\n                    <SendRoundedIcon/>\r\n                    <HelpRoundedIcon/>\r\n                </div>\r\n            </div> \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader\r\n","import React from 'react';\r\nimport './Message.css';\r\nimport { Avatar } from '@material-ui/core';\r\nfunction Message({timestamp,user,message}) {\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={user.photo}/>\r\n            <div className=\"message__info\">\r\n                <h4>{user.displayName} \r\n                    <span className=\"message__infoTime\">\r\n                        {new Date(parseInt(timestamp)).toDateString()}\r\n                    </span>\r\n                </h4>\r\n                <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Chat.css';\r\nimport ChatHeader from './ChatHeader';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard';\r\nimport GifIcon from '@material-ui/icons/Gif';\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport Message from './Message';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport { selectChannelId, selectChannelName } from '../features/appSlice';\r\nimport axios from './axios';\r\nimport Pusher from 'pusher-js'\r\n\r\nconst pusher = new Pusher('a92e0921af39228a0668', {\r\n    cluster: 'ap2'\r\n  });\r\n\r\nfunction Chat() {\r\n    const user = useSelector(selectUser);\r\n    const channelId = useSelector(selectChannelId);\r\n    const channelName = useSelector(selectChannelName);\r\n    const [input, setInput] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    const getConversation = (channelId) => {\r\n        if(channelId){\r\n            axios.get(`/get/conversation?id=${channelId}`).then((res)=> {\r\n                setMessages(res.data[0].conversation)\r\n            })\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        getConversation(channelId)\r\n\r\n        var channel = pusher.subscribe('conversation');\r\n        channel.bind('newMessage', function(data) {\r\n            getConversation(channelId)\r\n        });\r\n\r\n    }, [channelId]);\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n\r\n        axios.post(`/new/message?id=${channelId}`,{\r\n            message: input,\r\n            timestamp: Date.now(),\r\n            user: user\r\n        })\r\n        setInput('');\r\n        getConversation(channelId)\r\n\r\n        var channel = pusher.subscribe('conversation');\r\n        channel.bind('newMessage', function(data) {\r\n            getConversation(channelId)\r\n        });\r\n    };\r\n    \r\n    \r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <ChatHeader channelName={channelName}/>\r\n\r\n            <div className=\"chat__Messages\">\r\n                {messages.map((message)=>(\r\n                    <Message timestamp={message.timestamp}\r\n                    message={message.message}\r\n                    user={message.user} />\r\n                ))}\r\n                \r\n            </div>\r\n\r\n            <div className=\"chat__input\">\r\n                <AddCircleIcon fontSize=\"large\"/>\r\n                <form>\r\n                        <input disabled={!channelId} value={input} onChange={(e) => setInput(e.target.value)} placeholder={`Message #${channelName}`}/>\r\n                        <button onClick={sendMessage} className=\"chat__InputButton\" type=\"submit\">Send</button>\r\n                    </form>\r\n                <div className=\"chat__inputIcon\">\r\n                    <CardGiftcardIcon fontSize=\"large\"/>\r\n                    <GifIcon fontSize=\"large\"/>\r\n                    <EmojiEmotionsIcon fontSize=\"large\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport {auth,providor} from './Components/firebase'\r\nimport './Login.css';\r\nfunction Login() {\r\n    const login= () =>{\r\n       auth.signInWithPopup(providor).catch((error) => alert(error.message));\r\n    }\r\n    return (\r\n        <div className=\"login\">\r\n\r\n            <div className=\"login__logo\">\r\n                <img src=\"https://logo-logos.com/wp-content/uploads/2018/03/discord_icon_logo_remix.png\" alt=\"\"/>\r\n            </div>\r\n            \r\n            <Button onClick={login}>Sign In</Button>\r\n            <h3 className=\"msg\">EvilCord By Xam-3xPloiTeR</h3>\r\n        </div>\r\n    )\r\n}\r\nexport default Login\r\n","import React, {useEffect} from 'react';\r\nimport {useSelector ,useDispatch} from 'react-redux';\r\nimport {selectUser} from './features/userSlice';\r\nimport './App.css';\r\nimport Sidebar from './Components/Sidebar';\r\nimport Chat from './Components/Chat'\r\nimport Login from './Login';\r\nimport {auth} from './Components/firebase';\r\nimport {login,logout} from './features/userSlice';\r\nfunction App() {\r\n  const user = useSelector(selectUser);\r\n\r\n  const dispatch = useDispatch(selectUser);\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      if(authUser){\r\n        dispatch(login({\r\n          uid: authUser.uid,\r\n          photo: authUser.photoURL,\r\n          email: authUser.email,\r\n          displayName: authUser.displayName,\r\n        }))\r\n      }else{\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, [dispatch])\r\n  return (\r\n    <div className=\"app\">\r\n      {user==null ? (\r\n        <Login/>\r\n        \r\n      ):(\r\n        <>\r\n        <Sidebar />\r\n        <Chat />\r\n        </>\r\n      )\r\n      }\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}